export type UserType = {
  id: string;
  uid: string;
  name: string;
  bio: string;
  image: string;
  date: string;
  friends: string[];
  invite: string[];
  lastMsg?: string;
  lastMsgTime?: any;
  key?: string;
};

export type TypeUserContextProvider = {
  userId: string;
  selectedUser: UserType | any;
  user: UserType[];
  invite: UserType[];
  friends: UserType[];
  myself: UserType;
  isLoading: boolean;
  chats: any;
  message: string | string[] | null;
  selectFiles: string[] | [];
  chatId: { id: string; load: boolean };
  fileUploadProgress: number;
  setSelectFiles: React.Dispatch<React.SetStateAction<string[] | []>>;
  isRecording: boolean;
  isAudioPlaying: boolean;
  autoScroll: boolean;
  setAutoScroll: React.Dispatch<React.SetStateAction<boolean>>;
  setIsRecording: React.Dispatch<React.SetStateAction<boolean>>;
  setIsAudioPlaying: React.Dispatch<React.SetStateAction<boolean>>;
  setMessage: React.Dispatch<React.SetStateAction<string | string[] | null>>;
  setUserId: React.Dispatch<React.SetStateAction<string>>;
  getSelectedUser: (id: string) => void;
  getAllUsers: () => void;
  getUserFriends: (id: string[]) => void;
  inviteUser: (email: string) => void;
  getUserInvitations: (id: string[]) => void;
  acceptUserInvite: (id: string, userEmail: string) => void;
  rejectUserInvite: (id: string) => void;
  getChats: () => void;
  sendMessage: () => void;
  uploadFile: (type: "message" | "profile") => void;
  uploadAudio: (item: any) => void;
  deleteMsg: (id: string) => void;
  updateUserProfile: (name?: string, image?: string, bio?: string) => void;
  getOldChats: () => void;
  createChatId: () => string;
  toggleChatKey: (secKey: string) => void;
};

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?    @map("username")
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  bio           String?
  createdAt     DateTime   @default(now())
  active        Boolean    @default(false)
  friends       Friends[]
  requests      Requests[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Friends {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  user     User?   @relation(fields: [userId], references: [id])
  userId   String? @db.ObjectId
  friendId String  @db.ObjectId
}

model Requests {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id])
  userId    String? @db.ObjectId
  requestId String? @db.ObjectId
}

model Chat {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  connectionId String     @unique
  messages     Messages[]
}

model Messages {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String?
  media     Media[]
  createdAt DateTime @default(now())
  quote     String?  @db.ObjectId
  reaction  String?
  chat      Chat?    @relation(fields: [chatId], references: [connectionId])
  chatId    String?
  senderId  String   @db.ObjectId
}

model Media {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  url        String[]
  type       String
  messages   Messages? @relation(fields: [messagesId], references: [id])
  messagesId String?   @db.ObjectId
}
